/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.2
// source: auth.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = require('./auth_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.AuthServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.AuthServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.AuthenticationMessage,
 *   !proto.AuthenticationResponse>}
 */
const methodDescriptor_AuthService_authenticate = new grpc.web.MethodDescriptor(
  '/AuthService/authenticate',
  grpc.web.MethodType.UNARY,
  proto.AuthenticationMessage,
  proto.AuthenticationResponse,
  /**
   * @param {!proto.AuthenticationMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.AuthenticationResponse.deserializeBinary
);


/**
 * @param {!proto.AuthenticationMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.AuthenticationResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.AuthenticationResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.AuthServiceClient.prototype.authenticate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/AuthService/authenticate',
      request,
      metadata || {},
      methodDescriptor_AuthService_authenticate,
      callback);
};


/**
 * @param {!proto.AuthenticationMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.AuthenticationResponse>}
 *     Promise that resolves to the response
 */
proto.AuthServicePromiseClient.prototype.authenticate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/AuthService/authenticate',
      request,
      metadata || {},
      methodDescriptor_AuthService_authenticate);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ValidateMessage,
 *   !proto.ValidateResponse>}
 */
const methodDescriptor_AuthService_validate = new grpc.web.MethodDescriptor(
  '/AuthService/validate',
  grpc.web.MethodType.UNARY,
  proto.ValidateMessage,
  proto.ValidateResponse,
  /**
   * @param {!proto.ValidateMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ValidateResponse.deserializeBinary
);


/**
 * @param {!proto.ValidateMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ValidateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ValidateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.AuthServiceClient.prototype.validate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/AuthService/validate',
      request,
      metadata || {},
      methodDescriptor_AuthService_validate,
      callback);
};


/**
 * @param {!proto.ValidateMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ValidateResponse>}
 *     Promise that resolves to the response
 */
proto.AuthServicePromiseClient.prototype.validate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/AuthService/validate',
      request,
      metadata || {},
      methodDescriptor_AuthService_validate);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.InvalidateMessage,
 *   !proto.InvalidateResponse>}
 */
const methodDescriptor_AuthService_invalidate = new grpc.web.MethodDescriptor(
  '/AuthService/invalidate',
  grpc.web.MethodType.UNARY,
  proto.InvalidateMessage,
  proto.InvalidateResponse,
  /**
   * @param {!proto.InvalidateMessage} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.InvalidateResponse.deserializeBinary
);


/**
 * @param {!proto.InvalidateMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.InvalidateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.InvalidateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.AuthServiceClient.prototype.invalidate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/AuthService/invalidate',
      request,
      metadata || {},
      methodDescriptor_AuthService_invalidate,
      callback);
};


/**
 * @param {!proto.InvalidateMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.InvalidateResponse>}
 *     Promise that resolves to the response
 */
proto.AuthServicePromiseClient.prototype.invalidate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/AuthService/invalidate',
      request,
      metadata || {},
      methodDescriptor_AuthService_invalidate);
};


module.exports = proto;

